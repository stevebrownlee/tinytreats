// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TinyTreats.Data;

#nullable disable

namespace TinyTreats.Migrations
{
    [DbContext(typeof(TinyTreatsDbContext))]
    [Migration("20250516141314_MoreSeedData")]
    partial class MoreSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            Name = "Baker",
                            NormalizedName = "BAKER"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fb776c4-d77e-4c6b-9152-9ba87b26a41b",
                            Email = "admin@tinytreats.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TINYTREATS.COM",
                            NormalizedUserName = "ADMIN@TINYTREATS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEhI3Sm8u7HDM87IF/iJbCmoUspr2rM0gQXTpqvVwfpQseyxUd4BoisdaI4FiADTZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e520ed15-1d8b-4a7f-8d12-f21a01ddccac",
                            TwoFactorEnabled = false,
                            UserName = "admin@tinytreats.com"
                        },
                        new
                        {
                            Id = "e2cfe4e6-5437-4efb-9a66-8d1371796bda",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80b48ed3-e2dd-4091-8021-bd24ea9d45e2",
                            Email = "baker1@tinytreats.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BAKER1@TINYTREATS.COM",
                            NormalizedUserName = "BAKER1@TINYTREATS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBsPKisJg2q7wa0xDx3o8SeakxM6IYKmhp85EFe6i7hoi/PdX8g1l9BTEUfVdxgYxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8d9616c-39cf-4937-8372-3e7c1f6db659",
                            TwoFactorEnabled = false,
                            UserName = "baker1@tinytreats.com"
                        },
                        new
                        {
                            Id = "a1ffd800-9189-4a69-a24a-9b8c094f12a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5217f52-5f47-42ae-ba5b-ca3ba6e7e456",
                            Email = "baker2@tinytreats.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BAKER2@TINYTREATS.COM",
                            NormalizedUserName = "BAKER2@TINYTREATS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBqK+s1Pzo/8Ti90vSznlSrawGfS3HIs+Rzc5arZooN8Cb51YMgb91peOCOUeTtMLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "651e3a09-01b2-47dd-95b8-f7002aae29ca",
                            TwoFactorEnabled = false,
                            UserName = "baker2@tinytreats.com"
                        },
                        new
                        {
                            Id = "b9c6f5e4-d4d5-4a16-9551-b7e5e859c35a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "854a0fec-276b-4e02-bb71-bbde32068afb",
                            Email = "customer1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER1@EXAMPLE.COM",
                            NormalizedUserName = "CUSTOMER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE+y4DiwsG2WwRoaerPMTYhuf31fQblIarBninYgWwBdvEEBiQuqq/LJJAInhd9x1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6495448-2b1e-492b-a7e1-015d34080039",
                            TwoFactorEnabled = false,
                            UserName = "customer1@example.com"
                        },
                        new
                        {
                            Id = "c9d6f5e4-d4d5-4a16-9551-b7e5e859c35b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4208ae8-3d45-4723-ba41-ed46eff5bbf3",
                            Email = "customer2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER2@EXAMPLE.COM",
                            NormalizedUserName = "CUSTOMER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELE8sr5Y0PoqcpMkGFSiTht+5UWGbV3T+GR+umRsvMTudXh9H7KbWBa0vuNBRN53FA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec1f876d-5b4c-447d-9e50-5fb7981a9d1e",
                            TwoFactorEnabled = false,
                            UserName = "customer2@example.com"
                        },
                        new
                        {
                            Id = "d9d6f5e4-d4d5-4a16-9551-b7e5e859c35c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18e0e7ff-ccc5-48ae-9bdb-2db9fffedfde",
                            Email = "customer3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER3@EXAMPLE.COM",
                            NormalizedUserName = "CUSTOMER3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAR86BRI0YXuCyhHhiZF5rcsd8G5FlxZw3Eo80GKaZ8czYXX80WhWtJAYvG+SEuhSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "005b417d-e7fe-453a-a269-5b6acad7915f",
                            TwoFactorEnabled = false,
                            UserName = "customer3@example.com"
                        },
                        new
                        {
                            Id = "e9d6f5e4-d4d5-4a16-9551-b7e5e859c35d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7f4f54e-21e2-478f-a4da-f937bc2b17da",
                            Email = "customer4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER4@EXAMPLE.COM",
                            NormalizedUserName = "CUSTOMER4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGARNvl9fg+x6d97zK2hERdirfqNu5G0+WjRcE49LxrBrAqWrP42peIUGNLlV8rEVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f373bfb-dc86-45b5-81e6-4485f3bcf2d6",
                            TwoFactorEnabled = false,
                            UserName = "customer4@example.com"
                        },
                        new
                        {
                            Id = "f9d6f5e4-d4d5-4a16-9551-b7e5e859c35e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "884f6309-00a9-4a86-b3bf-6d5ced6c0f26",
                            Email = "customer5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER5@EXAMPLE.COM",
                            NormalizedUserName = "CUSTOMER5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPCcE+cpqxiiryRLMSbXKd8Lx7QUASECov+zyGWp3yz09iC1NLeX/gObcEa17tghwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a44a3552-5c6b-4179-8045-b94ca0520187",
                            TwoFactorEnabled = false,
                            UserName = "customer5@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "e2cfe4e6-5437-4efb-9a66-8d1371796bda",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "a1ffd800-9189-4a69-a24a-9b8c094f12a5",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b9c6f5e4-d4d5-4a16-9551-b7e5e859c35a",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "c9d6f5e4-d4d5-4a16-9551-b7e5e859c35b",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "d9d6f5e4-d4d5-4a16-9551-b7e5e859c35c",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "e9d6f5e4-d4d5-4a16-9551-b7e5e859c35d",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "f9d6f5e4-d4d5-4a16-9551-b7e5e859c35e",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TinyTreats.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Bakery Lane",
                            FirstName = "Admin",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "User"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Pastry Ave",
                            FirstName = "Jane",
                            IdentityUserId = "e2cfe4e6-5437-4efb-9a66-8d1371796bda",
                            LastName = "Baker"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Cupcake Blvd",
                            FirstName = "John",
                            IdentityUserId = "a1ffd800-9189-4a69-a24a-9b8c094f12a5",
                            LastName = "Dough"
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Sweet St",
                            FirstName = "Alice",
                            IdentityUserId = "b9c6f5e4-d4d5-4a16-9551-b7e5e859c35a",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 5,
                            Address = "202 Dessert Dr",
                            FirstName = "Bob",
                            IdentityUserId = "c9d6f5e4-d4d5-4a16-9551-b7e5e859c35b",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 6,
                            Address = "303 Frosting Ln",
                            FirstName = "Carol",
                            IdentityUserId = "d9d6f5e4-d4d5-4a16-9551-b7e5e859c35c",
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = 7,
                            Address = "404 Cookie Ct",
                            FirstName = "David",
                            IdentityUserId = "e9d6f5e4-d4d5-4a16-9551-b7e5e859c35d",
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = 8,
                            Address = "505 Muffin Ave",
                            FirstName = "Emma",
                            IdentityUserId = "f9d6f5e4-d4d5-4a16-9551-b7e5e859c35e",
                            LastName = "Davis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TinyTreats.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });
#pragma warning restore 612, 618
        }
    }
}
