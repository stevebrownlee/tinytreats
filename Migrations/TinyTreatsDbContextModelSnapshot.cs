// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TinyTreats.Data;

#nullable disable

namespace TinyTreats.Migrations
{
    [DbContext(typeof(TinyTreatsDbContext))]
    partial class TinyTreatsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            Name = "Baker",
                            NormalizedName = "BAKER"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3da8f312-2be0-4430-88a5-e0c7a750bdea",
                            Email = "admin@tinytreats.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TINYTREATS.COM",
                            NormalizedUserName = "ADMIN@TINYTREATS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEKZwAxFLdHabbyhisLkvDiJphGIBFXVmopRyq+9A+XU/+6n3a45V0DBOH8I1XbZHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c09a8fce-574c-48b1-8194-63184bf108eb",
                            TwoFactorEnabled = false,
                            UserName = "admin@tinytreats.com"
                        },
                        new
                        {
                            Id = "e2cfe4e6-5437-4efb-9a66-8d1371796bda",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eddc05ef-fd87-45cf-84c7-9c9f5cd44f9a",
                            Email = "baker1@tinytreats.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BAKER1@TINYTREATS.COM",
                            NormalizedUserName = "BAKER1@TINYTREATS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIx9VYFhEcb6Ux9qMvxbP46Q+Eijvj0TixDc8Lzbkp1J1iv7FM1sPmdxpjqBRmiCzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a94080f-c39b-4681-9602-f725039911d7",
                            TwoFactorEnabled = false,
                            UserName = "baker1@tinytreats.com"
                        },
                        new
                        {
                            Id = "a1ffd800-9189-4a69-a24a-9b8c094f12a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf7ae2cb-6589-4f49-bb1f-2fae3faa2895",
                            Email = "baker2@tinytreats.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BAKER2@TINYTREATS.COM",
                            NormalizedUserName = "BAKER2@TINYTREATS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPc6WBscPZ9H/D0wDX6twZ5NUai/4omR/aY1kYqWdcSfzNI7Yy7HmF0GZD1Y7mNYxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15218561-7c0d-4d86-9928-4d9d261732ef",
                            TwoFactorEnabled = false,
                            UserName = "baker2@tinytreats.com"
                        },
                        new
                        {
                            Id = "b9c6f5e4-d4d5-4a16-9551-b7e5e859c35a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc1c0c42-2cd7-4582-a1d4-777c8d404304",
                            Email = "customer1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER1@EXAMPLE.COM",
                            NormalizedUserName = "CUSTOMER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECcOFRzELgcx1nypKVSRmjRgbLsu5iNT22TA6pRK5zjMNNI+G6UfDsilK/ddlf/bTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb03b2fc-7fc8-494c-918e-1935c8fa00ad",
                            TwoFactorEnabled = false,
                            UserName = "customer1@example.com"
                        },
                        new
                        {
                            Id = "c9d6f5e4-d4d5-4a16-9551-b7e5e859c35b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2a90c82-0efa-4e55-a790-8f1f6e4aaa69",
                            Email = "customer2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER2@EXAMPLE.COM",
                            NormalizedUserName = "CUSTOMER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG3aKYVz/Tfs4gaHpX0se0IyjC9/vEnZiIGfBjaExPG4AMlvQkggTc/UwuD3FQmvBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "326ec825-8ff8-451c-bf6e-63d9f032ceb1",
                            TwoFactorEnabled = false,
                            UserName = "customer2@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "e2cfe4e6-5437-4efb-9a66-8d1371796bda",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "a1ffd800-9189-4a69-a24a-9b8c094f12a5",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b9c6f5e4-d4d5-4a16-9551-b7e5e859c35a",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "c9d6f5e4-d4d5-4a16-9551-b7e5e859c35b",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TinyTreats.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TinyTreats.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("TinyTreats.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Classic chocolate chip cookie with a soft center and crisp edges",
                            ImageUrl = "/images/chocolate-chip-cookie.jpg",
                            IsAvailable = true,
                            Name = "Chocolate Chip Cookie",
                            Price = 2.50m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Light and fluffy vanilla cupcake with buttercream frosting",
                            ImageUrl = "/images/vanilla-cupcake.jpg",
                            IsAvailable = true,
                            Name = "Vanilla Cupcake",
                            Price = 3.75m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Moist muffin packed with fresh blueberries",
                            ImageUrl = "/images/blueberry-muffin.jpg",
                            IsAvailable = true,
                            Name = "Blueberry Muffin",
                            Price = 3.25m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Soft roll with cinnamon swirl and cream cheese frosting",
                            ImageUrl = "/images/cinnamon-roll.jpg",
                            IsAvailable = true,
                            Name = "Cinnamon Roll",
                            Price = 4.50m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Rich and fudgy chocolate brownie",
                            ImageUrl = "/images/chocolate-brownie.jpg",
                            IsAvailable = true,
                            Name = "Chocolate Brownie",
                            Price = 3.00m
                        });
                });

            modelBuilder.Entity("TinyTreats.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Bakery Lane",
                            FirstName = "Admin",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "User"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Pastry Ave",
                            FirstName = "Jane",
                            IdentityUserId = "e2cfe4e6-5437-4efb-9a66-8d1371796bda",
                            LastName = "Baker"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Cupcake Blvd",
                            FirstName = "John",
                            IdentityUserId = "a1ffd800-9189-4a69-a24a-9b8c094f12a5",
                            LastName = "Dough"
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Sweet St",
                            FirstName = "Alice",
                            IdentityUserId = "b9c6f5e4-d4d5-4a16-9551-b7e5e859c35a",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 5,
                            Address = "202 Dessert Dr",
                            FirstName = "Bob",
                            IdentityUserId = "c9d6f5e4-d4d5-4a16-9551-b7e5e859c35b",
                            LastName = "Smith"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TinyTreats.Models.Order", b =>
                {
                    b.HasOne("TinyTreats.Models.UserProfile", "UserProfile")
                        .WithMany("Orders")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("TinyTreats.Models.OrderItem", b =>
                {
                    b.HasOne("TinyTreats.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TinyTreats.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TinyTreats.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithOne()
                        .HasForeignKey("TinyTreats.Models.UserProfile", "IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("TinyTreats.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("TinyTreats.Models.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("TinyTreats.Models.UserProfile", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
